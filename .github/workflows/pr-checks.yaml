name: Test PRs

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - name: Lint code
        run: npx eslint . --ext .js,.jsx,.ts,.tsx

  check-version:
    name: Check version is higher than in master branch
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          path: current
          sparse-checkout: |
            package.json
          sparse-checkout-cone-mode: false

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base
          sparse-checkout: |
            package.json
          sparse-checkout-cone-mode: false

      - name: Get versions
        id: versions
        run: |
          echo base_version=$(cat ./base/package.json | jq '.version' -r) >> "$GITHUB_OUTPUT"
          echo current_version=$(cat ./current/package.json | jq '.version' -r) >> "$GITHUB_OUTPUT"

      - name: Compare versions
        uses: madhead/semver-utils@latest
        id: compare
        with:
          version: ${{ steps.versions.outputs.current_version }}
          compare-to: ${{ steps.versions.outputs.base_version }}
      - run: |
          [[ "${{ steps.compare.outputs.comparison-result }}" == ">" ]]

  check-changelog:
    name: Check changelog is present
    runs-on: ubuntu-latest
    steps:
      - name: Checkout changelog
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            CHANGELOG.md
            package.json
          sparse-checkout-cone-mode: false

      - name: Get new version
        id: new-version
        run: echo version=$(cat package.json | jq '.version' -r) >> "$GITHUB_OUTPUT"

      - name: Ensure changelog for new version if present
        run: grep ${{ steps.new-version.outputs.version }} CHANGELOG.md
